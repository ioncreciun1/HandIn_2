@page "/Login"
@using HandIn_2.Authenthication
@namespace LoginComponent

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <div class="form">
        <div class="formBlock">

            <input type="text" placeholder="Insert Username" class="username" @bind-value="username">

            <input type="password" placeholder="Insert Password" class="password" @bind-value="password">
            <div class="login_error">@errorMessage</div>
            <button class="login_button" @onclick="PerformLogin">Log In</button>
        </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="logOut">
            <button @onclick="PerformLogout">Log Out</button>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin() {
        errorMessage = "";
        try {
           await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            NavigationManager.NavigateTo($"/");
        } catch (Exception e) {
            errorMessage = e.Message;
        }
    }
    public async Task PerformLogout() {
        errorMessage = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/Login");
        } catch (Exception e) { }
    }
    
}